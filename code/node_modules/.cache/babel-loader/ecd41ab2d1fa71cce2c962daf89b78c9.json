{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dubin\\\\Github\\\\faculty-voting\\\\code\\\\src\\\\pages\\\\Poll.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Colors } from '../components/theme/Colors';\nimport MultiVoteCard from '../components/cards/MultiVoteCard';\nimport SnglVoteCard from '../components/cards/SnglVoteCard';\nimport firebase from '../firebase';\nimport { code } from './RoomCode';\nimport getPollInf from '../fire-funcs';\nconst PageWrapper = styled.div`\n  background-color: ${Colors.LightBlue};\n  position: absolute;\n  right: 0;\n  left: 0;\n  top: 0;\n  bottom: 0;\n`; // FIREBASE NEEDS - it doesn't necessarily matter what format the data is stored\n// in firebase, this is how i am thinking of it right now, we need to add some\n// more functionality to handle unqiue inputs per user\n// poll = { type: 'single' || 'multiple',\n//          title: 'Poll title',\n//          description: 'Poll description',\n//          options: [\n//            { id: 'Some id',\n//              type: 'text' || 'input' || 'textarea',\n//              value: 'Poll text' || InputValue}\n//          ],\n//          results: {\n//            'Some id': { tally: 0 } // 'Some id' is from options\n//          }\n//        }\n\nconst getPollInfo = () => {\n  // obtain poll info from firebase, want to return in the format bellow\n  return {\n    type: 'multiple',\n    title: 'Poll Title',\n    description: 'Descriptive description of ze poll...',\n    options: [{\n      type: 'text',\n      value: 'Option 1'\n    }, {\n      type: 'text',\n      value: 'Option 2'\n    }, {\n      type: 'input',\n      value: null\n    }]\n  };\n};\n\nconst updateFirebase = props => {\n  console.log(props);\n  const {\n    options,\n    submittedOptions\n  } = props; // updateFirebase - specifically the results\n};\n\nconst renderSingle = props => /*#__PURE__*/React.createElement(SnglVoteCard, Object.assign({}, props, {\n  getVote: updateFirebase,\n  medium: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }\n}));\n\nconst renderMultiple = props => /*#__PURE__*/React.createElement(MultiVoteCard, Object.assign({}, props, {\n  getVote: updateFirebase,\n  medium: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }\n}));\n\nconst PollScreen = props => {\n  const {\n    type,\n    ...rest\n  } = getPollInfo();\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, type === 'single' ? renderSingle(rest) : renderMultiple(rest));\n};\n\nexport default PollScreen; // class PollScreen extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {selectedBubble: null,\n//                   submittedBubble: null,\n//                   voted: false,\n//                   last_vote: null,\n//                   vote: null};\n//     //\n//     this.handleOptionClick = this.handleOptionClick.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//\n//   handleOptionClick = (id) => {\n//     if (this.state.selectedBubble === id) {\n//       this.setState({selectedBubble: null});\n//     }\n//     else { this.setState({selectedBubble: id}); }\n//   }\n//\n//\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     var docRef = firebase.firestore().collection(code).doc(\"general-poll\");\n//\n//     if (this.state.selectedBubble && !this.state.voted){\n//       this.setState({voted: true,\n//                      vote: this.state.selectedBubble});\n//     }\n//     else if (this.state.selectedBubble != this.state.submittedBubble){\n//       this.setState({voted: true,\n//                      last_vote: this.state.vote,\n//                      vote: this.state.selectedBubble});\n//     }\n//\n//     docRef.get().then(snap =>{\n//       console.log(snap);\n//       if (this.state.vote == 0) {\n//         docRef.update({\n//           yes: Number(snap.data()['yes'].toString()) + 1\n//         });\n//        }\n//        else if (this.state.vote == 1) {\n//         docRef.update({\n//           no: Number(snap.data()['no'].toString()) + 1\n//         });\n//       }\n//       else if (this.state.vote == 2) {\n//         docRef.update({\n//           abstain: Number(snap.data()['abstain'].toString()) + 1\n//         });\n//       }\n//\n//       if (this.state.last_vote == 0) {\n//         docRef.update({\n//           yes: Number(snap.data()['yes'].toString()) - 1\n//         });\n//        }\n//        else if (this.state.last_vote == 1) {\n//         docRef.update({\n//           no: Number(snap.data()['no'].toString()) - 1\n//         });\n//       }\n//       else if (this.state.last_vote == 2) {\n//         docRef.update({\n//           abstain: Number(snap.data()['abstain'].toString()) - 1\n//         });\n//       }\n//      });\n//   }\n//\n//   render() {\n//\n//     const unselected = this.state.selectedBubble === null;\n//     const submit = !this.state.voted;\n//     const submitted = this.state.selectedBubble === this.state.vote;\n//     const resubmit = this.state.selectedBubble != this.state.vote;\n//\n//     return (\n//         <PageWrapper>\n//           <VotingCard medium\n//                       width={600}\n//                       title={'Poll Title'}\n//                       description={'Description of the poll... very informative.'}\n//                       options={['Yes', 'No', 'Abstain']}\n//                       handleOptionClick={this.handleOptionClick}\n//                       selectedBubble={this.state.selectedBubble}\n//                       handleSubmit={this.handleSubmit}\n//                       unselected={unselected} submit={submit} resubmit={resubmit} submitted={submitted}/>\n//         </PageWrapper>\n//       );\n//   }\n// };","map":{"version":3,"sources":["C:/Users/dubin/Github/faculty-voting/code/src/pages/Poll.js"],"names":["React","styled","Colors","MultiVoteCard","SnglVoteCard","firebase","code","getPollInf","PageWrapper","div","LightBlue","getPollInfo","type","title","description","options","value","updateFirebase","props","console","log","submittedOptions","renderSingle","renderMultiple","PollScreen","rest"],"mappings":";AAAA,OAAOA,KAAP,MAAqB,OAArB;AACA,OAAOC,MAAP,MAAqB,mBAArB;AAEA,SAASC,MAAT,QAAuB,4BAAvB;AAEA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAGA,MAAMC,WAAW,GAAGP,MAAM,CAACQ,GAAI;sBACTP,MAAM,CAACQ,SAAU;;;;;;CADvC,C,CAUA;AACA;AACA;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAED,MAAMC,WAAW,GAAG,MAAM;AAExB;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAE,UADD;AAELC,IAAAA,KAAK,EAAE,YAFF;AAGLC,IAAAA,WAAW,EAAE,uCAHR;AAILC,IAAAA,OAAO,EAAE,CACP;AAAEH,MAAAA,IAAI,EAAE,MAAR;AACEI,MAAAA,KAAK,EAAE;AADT,KADO,EAGP;AAAEJ,MAAAA,IAAI,EAAE,MAAR;AACEI,MAAAA,KAAK,EAAE;AADT,KAHO,EAKP;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AACEI,MAAAA,KAAK,EAAE;AADT,KALO;AAJJ,GAAP;AAcD,CAlBD;;AAoBA,MAAMC,cAAc,GAAKC,KAAF,IAAa;AAElCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,QAAM;AAAEH,IAAAA,OAAF;AAAWM,IAAAA;AAAX,MAAgCH,KAAtC,CAJkC,CAMlC;AAED,CARD;;AAUA,MAAMI,YAAY,GAAKJ,KAAF,iBAEnB,oBAAC,YAAD,oBAAkBA,KAAlB;AACc,EAAA,OAAO,EAAED,cADvB;AAEc,EAAA,MAAM,MAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFF;;AAOA,MAAMM,cAAc,GAAKL,KAAF,iBACrB,oBAAC,aAAD,oBAAmBA,KAAnB;AACe,EAAA,OAAO,EAAED,cADxB;AAEe,EAAA,MAAM,MAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAMA,MAAMO,UAAU,GAAIN,KAAD,IAAW;AAE5B,QAAM;AAAEN,IAAAA,IAAF;AAAQ,OAAGa;AAAX,MAAoBd,WAAW,EAArC;AAEA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,KAAK,QAAT,GAAoBU,YAAY,CAACG,IAAD,CAAhC,GAAyCF,cAAc,CAACE,IAAD,CAD1D,CADF;AAMD,CAVD;;AAYA,eAAeD,UAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React    from 'react';\r\nimport styled   from 'styled-components';\r\n\r\nimport { Colors } from '../components/theme/Colors';\r\n\r\nimport MultiVoteCard from '../components/cards/MultiVoteCard';\r\nimport SnglVoteCard from '../components/cards/SnglVoteCard';\r\n\r\nimport firebase from '../firebase';\r\nimport {code} from './RoomCode';\r\nimport getPollInf from '../fire-funcs';\r\n\r\n\r\nconst PageWrapper = styled.div`\r\n  background-color: ${Colors.LightBlue};\r\n  position: absolute;\r\n  right: 0;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n`;\r\n\r\n\r\n// FIREBASE NEEDS - it doesn't necessarily matter what format the data is stored\r\n// in firebase, this is how i am thinking of it right now, we need to add some\r\n// more functionality to handle unqiue inputs per user\r\n\r\n // poll = { type: 'single' || 'multiple',\r\n //          title: 'Poll title',\r\n //          description: 'Poll description',\r\n //          options: [\r\n //            { id: 'Some id',\r\n //              type: 'text' || 'input' || 'textarea',\r\n //              value: 'Poll text' || InputValue}\r\n //          ],\r\n //          results: {\r\n //            'Some id': { tally: 0 } // 'Some id' is from options\r\n //          }\r\n //        }\r\n\r\nconst getPollInfo = () => {\r\n\r\n  // obtain poll info from firebase, want to return in the format bellow\r\n\r\n  return {\r\n    type: 'multiple',\r\n    title: 'Poll Title',\r\n    description: 'Descriptive description of ze poll...',\r\n    options: [\r\n      { type: 'text',\r\n        value: 'Option 1' },\r\n      { type: 'text',\r\n        value: 'Option 2' },\r\n      { type: 'input',\r\n        value: null }\r\n    ]\r\n  }\r\n\r\n}\r\n\r\nconst updateFirebase = ( props ) => {\r\n\r\n  console.log(props);\r\n\r\n  const { options, submittedOptions } = props;\r\n\r\n  // updateFirebase - specifically the results\r\n\r\n}\r\n\r\nconst renderSingle = ( props ) => (\r\n\r\n  <SnglVoteCard {...props}\r\n                getVote={updateFirebase}\r\n                medium/>\r\n);\r\n\r\nconst renderMultiple = ( props ) => (\r\n  <MultiVoteCard {...props}\r\n                 getVote={updateFirebase}\r\n                 medium/>\r\n);\r\n\r\nconst PollScreen = (props) => {\r\n\r\n  const { type, ...rest } = getPollInfo();\r\n\r\n  return(\r\n    <PageWrapper>\r\n      {type === 'single' ? renderSingle(rest) : renderMultiple(rest)}\r\n    </PageWrapper>\r\n  )\r\n\r\n};\r\n\r\nexport default PollScreen;\r\n\r\n// class PollScreen extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {selectedBubble: null,\r\n//                   submittedBubble: null,\r\n//                   voted: false,\r\n//                   last_vote: null,\r\n//                   vote: null};\r\n//     //\r\n//     this.handleOptionClick = this.handleOptionClick.bind(this);\r\n//     this.handleSubmit = this.handleSubmit.bind(this);\r\n//   }\r\n//\r\n//   handleOptionClick = (id) => {\r\n//     if (this.state.selectedBubble === id) {\r\n//       this.setState({selectedBubble: null});\r\n//     }\r\n//     else { this.setState({selectedBubble: id}); }\r\n//   }\r\n//\r\n//\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     var docRef = firebase.firestore().collection(code).doc(\"general-poll\");\r\n//\r\n//     if (this.state.selectedBubble && !this.state.voted){\r\n//       this.setState({voted: true,\r\n//                      vote: this.state.selectedBubble});\r\n//     }\r\n//     else if (this.state.selectedBubble != this.state.submittedBubble){\r\n//       this.setState({voted: true,\r\n//                      last_vote: this.state.vote,\r\n//                      vote: this.state.selectedBubble});\r\n//     }\r\n//\r\n//     docRef.get().then(snap =>{\r\n//       console.log(snap);\r\n//       if (this.state.vote == 0) {\r\n//         docRef.update({\r\n//           yes: Number(snap.data()['yes'].toString()) + 1\r\n//         });\r\n//        }\r\n//        else if (this.state.vote == 1) {\r\n//         docRef.update({\r\n//           no: Number(snap.data()['no'].toString()) + 1\r\n//         });\r\n//       }\r\n//       else if (this.state.vote == 2) {\r\n//         docRef.update({\r\n//           abstain: Number(snap.data()['abstain'].toString()) + 1\r\n//         });\r\n//       }\r\n//\r\n//       if (this.state.last_vote == 0) {\r\n//         docRef.update({\r\n//           yes: Number(snap.data()['yes'].toString()) - 1\r\n//         });\r\n//        }\r\n//        else if (this.state.last_vote == 1) {\r\n//         docRef.update({\r\n//           no: Number(snap.data()['no'].toString()) - 1\r\n//         });\r\n//       }\r\n//       else if (this.state.last_vote == 2) {\r\n//         docRef.update({\r\n//           abstain: Number(snap.data()['abstain'].toString()) - 1\r\n//         });\r\n//       }\r\n//      });\r\n//   }\r\n//\r\n//   render() {\r\n//\r\n//     const unselected = this.state.selectedBubble === null;\r\n//     const submit = !this.state.voted;\r\n//     const submitted = this.state.selectedBubble === this.state.vote;\r\n//     const resubmit = this.state.selectedBubble != this.state.vote;\r\n//\r\n//     return (\r\n//         <PageWrapper>\r\n//           <VotingCard medium\r\n//                       width={600}\r\n//                       title={'Poll Title'}\r\n//                       description={'Description of the poll... very informative.'}\r\n//                       options={['Yes', 'No', 'Abstain']}\r\n//                       handleOptionClick={this.handleOptionClick}\r\n//                       selectedBubble={this.state.selectedBubble}\r\n//                       handleSubmit={this.handleSubmit}\r\n//                       unselected={unselected} submit={submit} resubmit={resubmit} submitted={submitted}/>\r\n//         </PageWrapper>\r\n//       );\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}