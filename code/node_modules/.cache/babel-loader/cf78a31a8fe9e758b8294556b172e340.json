{"ast":null,"code":"import PollItem from './components/PollItem';\nimport firebase from './firebase';\nimport { code } from './pages/RoomCode'; //               (roomCode, pollTitle, \"yes\", 0)\n\nfunction sendFire(collectionName, docName, fieldName, fieldValue) {\n  firebase.firestore().collection(collectionName).doc(docName).set({\n    name: fieldName,\n    value: fieldValue\n  });\n}\n\nconst addPollFire = function addPollFire(collectionName, poll) {\n  firebase.firestore().collection(collectionName).doc(poll.title).set({\n    description: poll.description,\n    showResults: poll.showResults,\n    order: poll.order,\n    status: poll.status,\n    type: poll.type\n  });\n  firebase.firestore().collection(collectionName).doc(poll.title).collection(\"results\").doc(\"Option\" + poll.order.toString()).set(poll.optionMap);\n};\n\nconst getPollInf = function getPollInf(collectionName, pollTitle) {\n  var newPoll = new PollItem();\n  var docRef = firebase.firestore().collection(collectionName).doc(pollTitle);\n  docRef.get().then(snap => {\n    console.log(snap.data());\n    newPoll.setDescription(snap.data()['description'].toString());\n    newPoll.setShowResults(snap.data()['showResults'].toString());\n    newPoll.setOrder(snap.data()['order'].toString());\n    newPoll.setType(snap.data()['type'].toString());\n    newPoll.setStatus(snap.data()['status'].toString());\n  });\n  newPoll.setTitle(pollTitle);\n  return newPoll;\n}; // firebase.firestore().collection(code).doc(\"general-poll\");\n// docRef.get().then(snap =>{\n//    console.log(snap);\n//    if (this.state.vote == 0) {\n//      docRef.update({\n//       yes: Number(snap.data()['yes'].toString()) + 1\n//     });\n//     }\n\n\nexport default addPollFire;\nexport { getPollInf };","map":{"version":3,"sources":["C:/Users/dubin/Github/faculty-voting/code/src/fire-funcs.js"],"names":["PollItem","firebase","code","sendFire","collectionName","docName","fieldName","fieldValue","firestore","collection","doc","set","name","value","addPollFire","poll","title","description","showResults","order","status","type","toString","optionMap","getPollInf","pollTitle","newPoll","docRef","get","then","snap","console","log","data","setDescription","setShowResults","setOrder","setType","setStatus","setTitle"],"mappings":"AAAA,OAAOA,QAAP,MAAiC,uBAAjC;AACA,OAAOC,QAAP,MAAiC,YAAjC;AACA,SAAQC,IAAR,QAAiC,kBAAjC,C,CAGA;;AACA,SAASC,QAAT,CAAkBC,cAAlB,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsDC,UAAtD,EAAkE;AAC9DN,EAAAA,QAAQ,CACHO,SADL,GAEKC,UAFL,CAEgBL,cAFhB,EAGKM,GAHL,CAGSL,OAHT,EAIKM,GAJL,CAIS;AACDC,IAAAA,IAAI,EAAEN,SADL;AAEDO,IAAAA,KAAK,EAAEN;AAFN,GAJT;AAOH;;AAED,MAAMO,WAAW,GAAG,SAASA,WAAT,CAAqBV,cAArB,EAAqCW,IAArC,EAA2C;AAC3Dd,EAAAA,QAAQ,CACLO,SADH,GAEGC,UAFH,CAEcL,cAFd,EAGGM,GAHH,CAGOK,IAAI,CAACC,KAHZ,EAIGL,GAJH,CAIO;AACHM,IAAAA,WAAW,EAAEF,IAAI,CAACE,WADf;AAEHC,IAAAA,WAAW,EAAEH,IAAI,CAACG,WAFf;AAGHC,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KAHT;AAIHC,IAAAA,MAAM,EAAEL,IAAI,CAACK,MAJV;AAKHC,IAAAA,IAAI,EAAEN,IAAI,CAACM;AALR,GAJP;AAWApB,EAAAA,QAAQ,CACHO,SADL,GAEKC,UAFL,CAEgBL,cAFhB,EAGKM,GAHL,CAGSK,IAAI,CAACC,KAHd,EAIKP,UAJL,CAIgB,SAJhB,EAKKC,GALL,CAKS,WAAWK,IAAI,CAACI,KAAL,CAAWG,QAAX,EALpB,EAMKX,GANL,CAMSI,IAAI,CAACQ,SANd;AAOH,CAnBD;;AAqBA,MAAMC,UAAU,GAAG,SAASA,UAAT,CAAoBpB,cAApB,EAAoCqB,SAApC,EAA+C;AAC9D,MAAIC,OAAO,GAAG,IAAI1B,QAAJ,EAAd;AACA,MAAI2B,MAAM,GAAG1B,QAAQ,CAACO,SAAT,GAAqBC,UAArB,CAAgCL,cAAhC,EAAgDM,GAAhD,CAAoDe,SAApD,CAAb;AAEAE,EAAAA,MAAM,CAACC,GAAP,GAAaC,IAAb,CAAkBC,IAAI,IAAG;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,IAAL,EAAZ;AAEAP,IAAAA,OAAO,CAACQ,cAAR,CAAuBJ,IAAI,CAACG,IAAL,GAAY,aAAZ,EAA2BX,QAA3B,EAAvB;AACAI,IAAAA,OAAO,CAACS,cAAR,CAAuBL,IAAI,CAACG,IAAL,GAAY,aAAZ,EAA2BX,QAA3B,EAAvB;AACAI,IAAAA,OAAO,CAACU,QAAR,CAAiBN,IAAI,CAACG,IAAL,GAAY,OAAZ,EAAqBX,QAArB,EAAjB;AACAI,IAAAA,OAAO,CAACW,OAAR,CAAgBP,IAAI,CAACG,IAAL,GAAY,MAAZ,EAAoBX,QAApB,EAAhB;AACAI,IAAAA,OAAO,CAACY,SAAR,CAAkBR,IAAI,CAACG,IAAL,GAAY,QAAZ,EAAsBX,QAAtB,EAAlB;AACH,GARD;AAUAI,EAAAA,OAAO,CAACa,QAAR,CAAiBd,SAAjB;AAEA,SAAOC,OAAP;AACH,CAjBD,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeZ,WAAf;AACA,SAAQU,UAAR","sourcesContent":["import PollItem             from './components/PollItem';\r\nimport firebase             from './firebase';\r\nimport {code}               from './pages/RoomCode';\r\n\r\n\r\n//               (roomCode, pollTitle, \"yes\", 0)\r\nfunction sendFire(collectionName, docName, fieldName, fieldValue) {\r\n    firebase\r\n        .firestore()\r\n        .collection(collectionName)\r\n        .doc(docName)\r\n        .set({\r\n            name: fieldName,\r\n            value: fieldValue});\r\n}\r\n\r\nconst addPollFire = function addPollFire(collectionName, poll) {\r\n    firebase\r\n      .firestore()\r\n      .collection(collectionName)\r\n      .doc(poll.title)\r\n      .set({\r\n        description: poll.description,\r\n        showResults: poll.showResults,\r\n        order: poll.order,\r\n        status: poll.status,\r\n        type: poll.type});\r\n\r\n    firebase\r\n        .firestore()\r\n        .collection(collectionName)\r\n        .doc(poll.title)\r\n        .collection(\"results\")\r\n        .doc(\"Option\" + poll.order.toString())\r\n        .set(poll.optionMap);\r\n}\r\n\r\nconst getPollInf = function getPollInf(collectionName, pollTitle) {\r\n    var newPoll = new PollItem();\r\n    var docRef = firebase.firestore().collection(collectionName).doc(pollTitle);\r\n\r\n    docRef.get().then(snap =>{\r\n        console.log(snap.data());\r\n\r\n        newPoll.setDescription(snap.data()['description'].toString())\r\n        newPoll.setShowResults(snap.data()['showResults'].toString())\r\n        newPoll.setOrder(snap.data()['order'].toString())\r\n        newPoll.setType(snap.data()['type'].toString())\r\n        newPoll.setStatus(snap.data()['status'].toString())\r\n    });\r\n\r\n    newPoll.setTitle(pollTitle);\r\n\r\n    return newPoll;\r\n}\r\n\r\n// firebase.firestore().collection(code).doc(\"general-poll\");\r\n// docRef.get().then(snap =>{\r\n//    console.log(snap);\r\n//    if (this.state.vote == 0) {\r\n//      docRef.update({\r\n//       yes: Number(snap.data()['yes'].toString()) + 1\r\n//     });\r\n//     }\r\n\r\nexport default addPollFire;\r\nexport {getPollInf};"]},"metadata":{},"sourceType":"module"}