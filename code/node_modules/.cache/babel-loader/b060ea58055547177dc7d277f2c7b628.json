{"ast":null,"code":"var _jsxFileName = \"/Users/connorcates/Documents/Hamilton Senior/faculty-voting/code/src/components/TextInput.js\";\nimport React, { Component } from 'react';\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native';\n\nclass Inputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      roomCode: ''\n    };\n\n    this.handleCode = text => {\n      this.setState({\n        roomCode: text\n      });\n    };\n\n    this.enterRoom = roomCode => {\n      alert('Room code: ' + roomCode);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      style: styles.input,\n      underlineColorAndroid: \"transparent\",\n      placeholder: \"Room Code\",\n      placeholderTextColor: \"#9a73ef\",\n      autoCapitalize: \"none\",\n      onChangeText: this.handleCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TouchableOpacity, {\n      style: styles.submitButton,\n      onPress: () => this.enterRoom(this.state.roomCode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      style: styles.submitButtonText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }\n    }, \" Enter Room \")));\n  }\n\n}\n\nexport default Inputs;\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 23\n  },\n  input: {\n    margin: 15,\n    height: 40,\n    borderColor: '#7a42f4',\n    borderWidth: 1\n  },\n  submitButton: {\n    backgroundColor: '#7a42f4',\n    padding: 10,\n    margin: 15,\n    height: 40\n  },\n  submitButtonText: {\n    color: 'white'\n  }\n}); // import React from \"react\";\n//\n// const TextInput = props => {\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         value={props.value}\n//         onChange={event => console.log(\"value changed!\")}\n//       />\n//       <p>// place for errors</p>\n//     </div>\n//   );\n// };\n//\n// export default TextInput;\n// import React, { useContext, useEffect } from \"react\";\n// import { FormCtx } from \"./Form\";\n//\n// const TextInput = props => {\n//   const { id } = props;\n//   const { setFields, addField, fields } = useContext(FormCtx);\n//   const field = fields[id] || {};\n//   const {\n//     name,\n//     rows,\n//     value,\n//     validate,\n//     placeholder,\n//     label = \"\",\n//     type = \"text\",\n//     events = {},\n//     classes = {}\n//   } =  field;\n//   const { onChange, ...restEvents } = events;\n//   const{ contClass, fieldClass, errorClass } = classes;\n//\n//   const handleChange = event => {\n//     try {\n//       setFields(event, field);\n//     } catch (error) {\n//       throw error;\n//     }\n//\n//     if (typeof onChange == \"function\")  {\n//       onChange({\n//         ...field,\n//         value: event.target.value\n//       });\n//     }\n//   };\n//\n//   useEffect(() => {\n//     addField({\n//       field: props,\n//       value\n//     });\n//   }, []);\n//\n//   const fieldProps = {\n//     ...restEvents,\n//     id,\n//     name,\n//     type,\n//     value,\n//     validate,\n//     placeholder,\n//     className: fieldClass,\n//     onChange: handleChange\n//   };\n//\n//   if (type === \"textarea\") {\n//     delete fieldProps.type;\n//     delete fieldProps.value;\n//\n//     fieldProps.defaultValue = value;\n//     fieldProps.rows = rows || 2;\n//   }\n//\n//   return field && field.value !== undefined ? (\n//     <div className={contClass}>\n//       {label}\n//       {type === \"textarea\" ? (\n//         <textarea {...fieldProps} />\n//       ) : (\n//         <input {...fieldProps} />\n//       )}\n//       <p className={errorClass}>// place for errors</p>\n//     </div>\n//   ) : (\n//     \"\"\n//   );\n// };\n//\n// export default TextInput;","map":{"version":3,"sources":["/Users/connorcates/Documents/Hamilton Senior/faculty-voting/code/src/components/TextInput.js"],"names":["React","Component","View","Text","TouchableOpacity","TextInput","StyleSheet","Inputs","state","roomCode","handleCode","text","setState","enterRoom","alert","render","styles","container","input","submitButton","submitButtonText","create","paddingTop","margin","height","borderColor","borderWidth","backgroundColor","padding","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,gBAArB,EAAuCC,SAAvC,EAAkDC,UAAlD,QAAoE,cAApE;;AAEA,MAAMC,MAAN,SAAqBN,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC5BO,KAD4B,GACpB;AACLC,MAAAA,QAAQ,EAAE;AADL,KADoB;;AAAA,SAI5BC,UAJ4B,GAIdC,IAAD,IAAU;AACpB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,QAAQ,EAAEE;AAAZ,OAAd;AACF,KAN2B;;AAAA,SAO5BE,SAP4B,GAOfJ,QAAD,IAAc;AACvBK,MAAAA,KAAK,CAAC,gBAAgBL,QAAjB,CAAL;AACF,KAT2B;AAAA;;AAU5BM,EAAAA,MAAM,GAAG;AACN,wBACG,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAIC,MAAM,CAACC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAID,MAAM,CAACE,KAA3B;AACG,MAAA,qBAAqB,EAAG,aAD3B;AAEG,MAAA,WAAW,EAAG,WAFjB;AAGG,MAAA,oBAAoB,EAAG,SAH1B;AAIG,MAAA,cAAc,EAAG,MAJpB;AAKG,MAAA,YAAY,EAAI,KAAKR,UALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,eAQG,oBAAC,gBAAD;AACG,MAAA,KAAK,EAAIM,MAAM,CAACG,YADnB;AAEG,MAAA,OAAO,EACJ,MAAM,KAAKN,SAAL,CAAe,KAAKL,KAAL,CAAWC,QAA1B,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKG,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAIO,MAAM,CAACI,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALH,CARH,CADH;AAkBF;;AA7B2B;;AA+B/B,eAAeb,MAAf;AAEA,MAAMS,MAAM,GAAGV,UAAU,CAACe,MAAX,CAAkB;AAC9BJ,EAAAA,SAAS,EAAE;AACRK,IAAAA,UAAU,EAAE;AADJ,GADmB;AAI9BJ,EAAAA,KAAK,EAAE;AACJK,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,MAAM,EAAE,EAFJ;AAGJC,IAAAA,WAAW,EAAE,SAHT;AAIJC,IAAAA,WAAW,EAAE;AAJT,GAJuB;AAU9BP,EAAAA,YAAY,EAAE;AACXQ,IAAAA,eAAe,EAAE,SADN;AAEXC,IAAAA,OAAO,EAAE,EAFE;AAGXL,IAAAA,MAAM,EAAE,EAHG;AAIXC,IAAAA,MAAM,EAAE;AAJG,GAVgB;AAgB9BJ,EAAAA,gBAAgB,EAAC;AACdS,IAAAA,KAAK,EAAE;AADO;AAhBa,CAAlB,CAAf,C,CAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text, TouchableOpacity, TextInput, StyleSheet } from 'react-native'\n\nclass Inputs extends Component {\n   state = {\n      roomCode: ''\n   }\n   handleCode = (text) => {\n      this.setState({ roomCode: text })\n   }\n   enterRoom = (roomCode) => {\n      alert('Room code: ' + roomCode)\n   }\n   render() {\n      return (\n         <View style = {styles.container}>\n            <TextInput style = {styles.input}\n               underlineColorAndroid = \"transparent\"\n               placeholder = \"Room Code\"\n               placeholderTextColor = \"#9a73ef\"\n               autoCapitalize = \"none\"\n               onChangeText = {this.handleCode}/>\n\n            <TouchableOpacity\n               style = {styles.submitButton}\n               onPress = {\n                  () => this.enterRoom(this.state.roomCode)\n               }>\n               <Text style = {styles.submitButtonText}> Enter Room </Text>\n            </TouchableOpacity>\n         </View>\n      )\n   }\n}\nexport default Inputs\n\nconst styles = StyleSheet.create({\n   container: {\n      paddingTop: 23\n   },\n   input: {\n      margin: 15,\n      height: 40,\n      borderColor: '#7a42f4',\n      borderWidth: 1\n   },\n   submitButton: {\n      backgroundColor: '#7a42f4',\n      padding: 10,\n      margin: 15,\n      height: 40,\n   },\n   submitButtonText:{\n      color: 'white'\n   }\n})\n\n\n// import React from \"react\";\n//\n// const TextInput = props => {\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         value={props.value}\n//         onChange={event => console.log(\"value changed!\")}\n//       />\n//       <p>// place for errors</p>\n//     </div>\n//   );\n// };\n//\n// export default TextInput;\n\n// import React, { useContext, useEffect } from \"react\";\n// import { FormCtx } from \"./Form\";\n//\n// const TextInput = props => {\n//   const { id } = props;\n//   const { setFields, addField, fields } = useContext(FormCtx);\n//   const field = fields[id] || {};\n//   const {\n//     name,\n//     rows,\n//     value,\n//     validate,\n//     placeholder,\n//     label = \"\",\n//     type = \"text\",\n//     events = {},\n//     classes = {}\n//   } =  field;\n//   const { onChange, ...restEvents } = events;\n//   const{ contClass, fieldClass, errorClass } = classes;\n//\n//   const handleChange = event => {\n//     try {\n//       setFields(event, field);\n//     } catch (error) {\n//       throw error;\n//     }\n//\n//     if (typeof onChange == \"function\")  {\n//       onChange({\n//         ...field,\n//         value: event.target.value\n//       });\n//     }\n//   };\n//\n//   useEffect(() => {\n//     addField({\n//       field: props,\n//       value\n//     });\n//   }, []);\n//\n//   const fieldProps = {\n//     ...restEvents,\n//     id,\n//     name,\n//     type,\n//     value,\n//     validate,\n//     placeholder,\n//     className: fieldClass,\n//     onChange: handleChange\n//   };\n//\n//   if (type === \"textarea\") {\n//     delete fieldProps.type;\n//     delete fieldProps.value;\n//\n//     fieldProps.defaultValue = value;\n//     fieldProps.rows = rows || 2;\n//   }\n//\n//   return field && field.value !== undefined ? (\n//     <div className={contClass}>\n//       {label}\n//       {type === \"textarea\" ? (\n//         <textarea {...fieldProps} />\n//       ) : (\n//         <input {...fieldProps} />\n//       )}\n//       <p className={errorClass}>// place for errors</p>\n//     </div>\n//   ) : (\n//     \"\"\n//   );\n// };\n//\n// export default TextInput;\n"]},"metadata":{},"sourceType":"module"}