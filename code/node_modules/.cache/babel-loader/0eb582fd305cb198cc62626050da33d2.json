{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dubin\\\\Github\\\\faculty-voting\\\\code\\\\src\\\\components\\\\cards\\\\SnglVoteCard.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport ExtraPropTypes from 'react-extra-prop-types';\nimport { Colors } from '../theme/Colors';\nimport Body from '../theme/Body';\nimport Jumbo from '../theme/Jumbo';\nimport VotingCard from './VotingCard';\nimport MultipleChoiceGroup from '../options/MultipleChoiceGroup';\nimport SingleChoiceGroup from '../options/SingleChoiceGroup';\nimport Card from './Card';\nimport Button from '../buttons/Button';\nimport SubmitButton from '../buttons/SubmitButton';\nimport InputOption from '../options/InputOption';\nimport TextOption from '../options/TextOption';\nconst propTypes = {\n  getVote: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool\n};\nconst defaultProps = {\n  title: 'Poll Title',\n  description: 'Poll description is very informative...'\n};\n\nclass SngleVoteCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._inputHandler = (event, index) => {\n      let newOptions = this.state.options;\n      const newOption = { ...newOptions[index],\n        value: event.target.value\n      };\n      newOptions[index] = newOption;\n\n      this._updateInput(newOptions);\n    };\n\n    this._renderOptions = () => {\n      const options = this.state.options.map((item, index) => {\n        const {\n          type,\n          value\n        } = item;\n\n        if (type === 'input') {\n          return /*#__PURE__*/React.createElement(InputOption, {\n            onChange: event => this._inputHandler(event, index),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 11\n            }\n          });\n        } else if (type === 'textarea') {\n          console.log('here');\n          return /*#__PURE__*/React.createElement(InputOption, {\n            onChange: event => this._inputHandler(event, index),\n            inputType: 'textarea',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 11\n            }\n          });\n        }\n\n        ;\n        return /*#__PURE__*/React.createElement(TextOption, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }\n        }, value);\n      });\n      return options;\n    };\n\n    this._renderOptionGroup = () => {\n      const options = this._renderOptions();\n\n      return /*#__PURE__*/React.createElement(SingleChoiceGroup, {\n        color: Colors.Blue,\n        updateSelected: this._updateSelected,\n        small: this.props.small,\n        medium: this.props.medium,\n        large: this.props.large,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, options);\n    };\n\n    this._checkStatus = () => {\n      const selected = this.state.selectedOptions != null;\n      const submitted = this.state.submittedOptions != null;\n      const resubmit = this.state.submittedOptions != this.state.selectedOptions;\n\n      if (resubmit && selected && submitted) {\n        return {\n          resubmit: resubmit\n        };\n      } else if (submitted) {\n        return {\n          submitted: submitted\n        };\n      } else if (selected) {\n        return {\n          selected: selected\n        };\n      } else {\n        return {};\n      }\n    };\n\n    this._renderSubmitButton = () => {\n      const {\n        selected,\n        submitted,\n        resubmit\n      } = this._checkStatus();\n\n      const unselected = !selected && !submitted && !resubmit;\n      const submit = selected && !submitted && !resubmit;\n      return /*#__PURE__*/React.createElement(SubmitButton, Object.assign({\n        unselected: unselected,\n        submit: submit,\n        submitted: submitted,\n        resubmit: resubmit\n      }, this.props, {\n        onClick: this._handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    this.state = {\n      options: this.props.options,\n      submittedOptions: null,\n      selectedOptions: null\n    };\n    this._updateSelected = this._updateSelected.bind(this);\n    this._updateInput = this._updateInput.bind(this);\n    this._inputHandler = this._inputHandler.bind(this);\n    this._renderOptions = this._renderOptions.bind(this);\n    this._renderOptionGroup = this._renderOptionGroup.bind(this);\n    this._checkStatus = this._checkStatus.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n    this._renderSubmitButton = this._renderSubmitButton.bind(this);\n  }\n\n  async _updateSelected(selectedOptions) {\n    await this.setState({ ...this.state,\n      selectedOptions: selectedOptions\n    });\n  }\n\n  async _updateInput(newOptions) {\n    await this.setState({ ...this.state,\n      options: newOptions\n    });\n  }\n\n  async _handleSubmit(event) {\n    await this.setState({ ...this.state,\n      submittedOptions: this.state.selectedOptions\n    });\n\n    if (this.props.getVote) {\n      this.props.getVote({ ...this.state\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(VotingCard, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }), this._renderOptionGroup(), this._renderSubmitButton());\n  }\n\n}\n\n;\nSngleVoteCard.propTypes = PropTypes;\nSngleVoteCard.defaultProps = defaultProps;\nexport default SngleVoteCard;","map":{"version":3,"sources":["C:/Users/dubin/Github/faculty-voting/code/src/components/cards/SnglVoteCard.js"],"names":["React","styled","PropTypes","ExtraPropTypes","Colors","Body","Jumbo","VotingCard","MultipleChoiceGroup","SingleChoiceGroup","Card","Button","SubmitButton","InputOption","TextOption","propTypes","getVote","func","title","string","description","small","bool","medium","large","defaultProps","SngleVoteCard","Component","constructor","props","_inputHandler","event","index","newOptions","state","options","newOption","value","target","_updateInput","_renderOptions","map","item","type","console","log","_renderOptionGroup","Blue","_updateSelected","_checkStatus","selected","selectedOptions","submitted","submittedOptions","resubmit","_renderSubmitButton","unselected","submit","_handleSubmit","bind","setState","render"],"mappings":"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","sourcesContent":["import React            from 'react';\r\nimport styled           from 'styled-components';\r\nimport PropTypes        from 'prop-types';\r\nimport ExtraPropTypes   from 'react-extra-prop-types';\r\n\r\nimport { Colors }       from '../theme/Colors';\r\nimport Body             from '../theme/Body';\r\nimport Jumbo            from '../theme/Jumbo';\r\n\r\nimport VotingCard       from './VotingCard';\r\n\r\n\r\nimport MultipleChoiceGroup      from '../options/MultipleChoiceGroup';\r\nimport SingleChoiceGroup      from '../options/SingleChoiceGroup';\r\n\r\nimport Card             from './Card';\r\nimport Button           from '../buttons/Button';\r\nimport SubmitButton           from '../buttons/SubmitButton';\r\nimport InputOption       from '../options/InputOption';\r\nimport TextOption from '../options/TextOption';\r\n\r\nconst propTypes = {\r\n  getVote: PropTypes.func,\r\n\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n\r\n  small: PropTypes.bool,\r\n  medium: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  title: 'Poll Title',\r\n  description: 'Poll description is very informative...'\r\n};\r\n\r\nclass SngleVoteCard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { options: this.props.options,\r\n                   submittedOptions: null,\r\n                   selectedOptions: null};\r\n\r\n    this._updateSelected = this._updateSelected.bind(this);\r\n    this._updateInput = this._updateInput.bind(this);\r\n\r\n    this._inputHandler= this._inputHandler.bind(this);\r\n    this._renderOptions = this._renderOptions.bind(this);\r\n    this._renderOptionGroup = this._renderOptionGroup.bind(this);\r\n\r\n    this._checkStatus = this._checkStatus.bind(this);\r\n    this._handleSubmit = this._handleSubmit.bind(this);\r\n    this._renderSubmitButton = this._renderSubmitButton.bind(this);\r\n  };\r\n\r\n\r\n  async _updateSelected( selectedOptions ){\r\n\r\n    await this.setState({...this.state,\r\n                   selectedOptions: selectedOptions});\r\n\r\n  };\r\n\r\n  async _updateInput ( newOptions ) {\r\n\r\n    await this.setState({ ...this.state,\r\n                          options: newOptions });\r\n\r\n  };\r\n\r\n  _inputHandler = (event, index) => {\r\n\r\n    let newOptions = this.state.options;\r\n    const newOption = {...newOptions[index],\r\n                       value: event.target.value};\r\n    newOptions[index] = newOption;\r\n\r\n    this._updateInput(newOptions);\r\n\r\n  };\r\n\r\n  _renderOptions = () => {\r\n\r\n    const options = this.state.options.map((item, index) => {\r\n      const { type, value } = item;\r\n\r\n      if (type === 'input') {\r\n        return (\r\n          <InputOption onChange={(event) => this._inputHandler(event, index)}/>\r\n        );\r\n      }\r\n      else if (type === 'textarea') {\r\n        console.log('here')\r\n        return (\r\n          <InputOption onChange={(event) => this._inputHandler(event, index)}\r\n                       inputType={'textarea'} />\r\n        );\r\n      };\r\n\r\n      return (\r\n        <TextOption>\r\n          {value}\r\n        </TextOption>\r\n      );\r\n    });\r\n\r\n    return options;\r\n  }\r\n\r\n  _renderOptionGroup = () => {\r\n\r\n\r\n    const options = this._renderOptions();\r\n\r\n    return (\r\n        <SingleChoiceGroup color={Colors.Blue}\r\n                           updateSelected={this._updateSelected}\r\n                           small={this.props.small}\r\n                           medium={this.props.medium}\r\n                           large={this.props.large}>\r\n          {options}\r\n        </SingleChoiceGroup>\r\n    );\r\n  };\r\n\r\n  _checkStatus = () => {\r\n\r\n    const selected = this.state.selectedOptions != null;\r\n    const submitted = this.state.submittedOptions != null;\r\n    const resubmit = (this.state.submittedOptions != this.state.selectedOptions);\r\n\r\n    if ( resubmit && selected && submitted ) { return { resubmit: resubmit }}\r\n    else if ( submitted ) { return { submitted: submitted }}\r\n    else if ( selected ) { return { selected: selected }}\r\n    else { return {} }\r\n\r\n  };\r\n\r\n  async _handleSubmit( event ) {\r\n\r\n    await this.setState({ ...this.state,\r\n                          submittedOptions: this.state.selectedOptions });\r\n\r\n    if (this.props.getVote) {this.props.getVote({...this.state})}\r\n  };\r\n\r\n  _renderSubmitButton = () => {\r\n\r\n    const { selected, submitted, resubmit } = this._checkStatus();\r\n\r\n    const unselected = !selected && !submitted && !resubmit;\r\n    const submit = selected && !submitted && !resubmit;\r\n\r\n\r\n    return (\r\n      <SubmitButton unselected={unselected}\r\n                    submit={submit}\r\n                    submitted={submitted}\r\n                    resubmit={resubmit}\r\n                    {...this.props}\r\n                    onClick={this._handleSubmit}/>\r\n    )\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n      return (\r\n        <VotingCard {...this.props}>\r\n          {this._renderOptionGroup()}\r\n          {this._renderSubmitButton()}\r\n        </VotingCard>\r\n      )\r\n  }\r\n};\r\n\r\nSngleVoteCard.propTypes = PropTypes;\r\nSngleVoteCard.defaultProps = defaultProps;\r\n\r\nexport default SngleVoteCard;\r\n"]},"metadata":{},"sourceType":"module"}