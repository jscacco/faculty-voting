{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dubin\\\\Github\\\\faculty-voting\\\\code\\\\src\\\\components\\\\inputs\\\\TextArea.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport ExtraPropTypes from 'react-extra-prop-types';\nimport { Colors } from '../theme/Colors';\nimport { Fonts } from '../theme/Fonts';\nconst propTypes = {\n  placeholder: PropTypes.string,\n  fontColor: ExtraPropTypes.color,\n  backgroundColor: ExtraPropTypes.color,\n  borderColor: ExtraPropTypes.color,\n  extraSmall: PropTypes.bool,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool,\n  extraLarge: PropTypes.bool\n};\nconst defaultProps = {\n  placeholder: 'Write something...',\n  fontColor: Colors.Black,\n  borderColor: Colors.Blue\n};\nconst fontConfig = {\n  fontFamily: Fonts.WorkSans,\n  fontWeight: 'bold',\n  extraSmall: {\n    fontSize: 14,\n    lineHeight: 20\n  },\n  small: {\n    fontSize: 16,\n    lineHeight: 22\n  },\n  medium: {\n    fontSize: 20,\n    lineHeight: 28\n  },\n  large: {\n    fontSize: 26,\n    lineHeight: 36\n  },\n  extraLarge: {\n    fontSize: 32,\n    lineHeight: 42\n  }\n};\nconst TextAreaComponent = styled.textarea`\n  font-family: ${fontConfig.fontFamily};\n  font-weight: ${fontConfig.fontWeight};\n  font-size: ${({\n  fontSize\n}) => fontSize}px;\n  color: ${({\n  fontColor\n}) => fontColor};\n  line-height: ${({\n  lineHeight\n}) => lineHeight}px;\n  width: 100%;\n  height: ${({\n  height\n}) => height}px;\n  padding: 12px 20px;\n  box-sizing: border-box;\n  border: solid 3px ${({\n  borderColor\n}) => borderColor};\n  border-radius: 4px;\n  background-color: ${({\n  backgroundColor\n}) => backgroundColor ? backgroundColor : `none`};\n  overflow: visable;\n  resize: none;\n\n  ::placeholder {\n    color: ${Colors.LightBlue};\n  }\n  &:focus {\n    outline: none;\n    border: solid 3px ${Colors.Green};\n  }\n`;\n\nconst TextArea = props => {\n  const {\n    placeholder,\n    backgroundColor,\n    borderColor,\n    extraSmall,\n    small,\n    medium,\n    large,\n    extraLarge\n  } = props;\n  let sizeConfig;\n\n  if (extraSmall) {\n    sizeConfig = fontConfig.extraSmall;\n  } else if (small) {\n    sizeConfig = fontConfig.small;\n  } else if (large) {\n    sizeConfig = fontConfig.large;\n  } else if (extraLarge) {\n    sizeConfig = fontConfig.extraLarge;\n  } else {\n    sizeConfig = fontConfig.medium;\n  }\n\n  const height = sizeConfig.lineHeight * 3 + 24;\n  return /*#__PURE__*/React.createElement(TextAreaComponent, Object.assign({\n    fontSize: sizeConfig.fontSize,\n    lineHeight: sizeConfig.lineHeight,\n    height: height\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }));\n};\n\nTextArea.propTypes = propTypes;\nTextArea.defaultProps = defaultProps;\nexport default TextArea;","map":{"version":3,"sources":["C:/Users/dubin/Github/faculty-voting/code/src/components/inputs/TextArea.js"],"names":["React","styled","PropTypes","ExtraPropTypes","Colors","Fonts","propTypes","placeholder","string","fontColor","color","backgroundColor","borderColor","extraSmall","bool","small","medium","large","extraLarge","defaultProps","Black","Blue","fontConfig","fontFamily","WorkSans","fontWeight","fontSize","lineHeight","TextAreaComponent","textarea","height","LightBlue","Green","TextArea","props","sizeConfig"],"mappings":"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","sourcesContent":["import React            from 'react';\r\nimport styled           from 'styled-components';\r\nimport PropTypes        from 'prop-types';\r\nimport ExtraPropTypes   from 'react-extra-prop-types';\r\n\r\nimport { Colors }       from '../theme/Colors';\r\nimport { Fonts }        from '../theme/Fonts';\r\n\r\nconst propTypes = {\r\n  placeholder: PropTypes.string,\r\n\r\n  fontColor: ExtraPropTypes.color,\r\n  backgroundColor: ExtraPropTypes.color,\r\n  borderColor: ExtraPropTypes.color,\r\n\r\n  extraSmall: PropTypes.bool,\r\n  small: PropTypes.bool,\r\n  medium: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n  extraLarge: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  placeholder: 'Write something...',\r\n  fontColor: Colors.Black,\r\n  borderColor: Colors.Blue,\r\n}\r\n\r\nconst fontConfig = {\r\n  fontFamily: Fonts.WorkSans,\r\n  fontWeight: 'bold',\r\n  extraSmall: { fontSize: 14, lineHeight: 20  },\r\n  small: { fontSize: 16, lineHeight: 22 },\r\n  medium: { fontSize: 20, lineHeight: 28  },\r\n  large: { fontSize: 26, lineHeight: 36 },\r\n  extraLarge: { fontSize: 32, lineHeight: 42 }\r\n};\r\n\r\nconst TextAreaComponent = styled.textarea`\r\n  font-family: ${fontConfig.fontFamily};\r\n  font-weight: ${fontConfig.fontWeight};\r\n  font-size: ${({fontSize}) => fontSize}px;\r\n  color: ${({fontColor}) => fontColor};\r\n  line-height: ${({lineHeight}) => lineHeight}px;\r\n  width: 100%;\r\n  height: ${({height}) => height}px;\r\n  padding: 12px 20px;\r\n  box-sizing: border-box;\r\n  border: solid 3px ${({borderColor}) => borderColor};\r\n  border-radius: 4px;\r\n  background-color: ${({backgroundColor}) => backgroundColor ? backgroundColor : `none`};\r\n  overflow: visable;\r\n  resize: none;\r\n\r\n  ::placeholder {\r\n    color: ${Colors.LightBlue};\r\n  }\r\n  &:focus {\r\n    outline: none;\r\n    border: solid 3px ${Colors.Green};\r\n  }\r\n`;\r\n\r\nconst TextArea = ( props ) => {\r\n\r\n  const { placeholder, backgroundColor, borderColor,\r\n          extraSmall, small, medium, large, extraLarge } = props;\r\n\r\n  let sizeConfig;\r\n\r\n  if (extraSmall) { sizeConfig = fontConfig.extraSmall }\r\n  else if (small) { sizeConfig = fontConfig.small }\r\n  else if (large) { sizeConfig = fontConfig.large }\r\n  else if (extraLarge) { sizeConfig = fontConfig.extraLarge }\r\n  else { sizeConfig = fontConfig.medium }\r\n\r\n  const height = (sizeConfig.lineHeight * 3) + 24;\r\n\r\n  return (\r\n    <TextAreaComponent fontSize={sizeConfig.fontSize}\r\n                       lineHeight={sizeConfig.lineHeight}\r\n                       height={height}\r\n                       {...props}/>\r\n  );\r\n};\r\n\r\nTextArea.propTypes = propTypes;\r\nTextArea.defaultProps = defaultProps;\r\n\r\nexport default TextArea;\r\n"]},"metadata":{},"sourceType":"module"}