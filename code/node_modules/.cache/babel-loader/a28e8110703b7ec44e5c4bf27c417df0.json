{"ast":null,"code":"var _jsxFileName = \"/Users/connorcates/Documents/Hamilton Senior/faculty-voting/code/src/components/TextInput.js\";\nimport React from \"react\";\n\nconst TextInput = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: props.value,\n    onChange: event => console.log(\"value changed!\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"// place for errors\"));\n};\n\nexport default TextInput; // import React, { useContext, useEffect } from \"react\";\n// import { FormCtx } from \"./Form\";\n//\n// const TextInput = props => {\n//   const { id } = props;\n//   const { setFields, addField, fields } = useContext(FormCtx);\n//   const field = fields[id] || {};\n//   const {\n//     name,\n//     rows,\n//     value,\n//     validate,\n//     placeholder,\n//     label = \"\",\n//     type = \"text\",\n//     events = {},\n//     classes = {}\n//   } =  field;\n//   const { onChange, ...restEvents } = events;\n//   const{ contClass, fieldClass, errorClass } = classes;\n//\n//   const handleChange = event => {\n//     try {\n//       setFields(event, field);\n//     } catch (error) {\n//       throw error;\n//     }\n//\n//     if (typeof onChange == \"function\")  {\n//       onChange({\n//         ...field,\n//         value: event.target.value\n//       });\n//     }\n//   };\n//\n//   useEffect(() => {\n//     addField({\n//       field: props,\n//       value\n//     });\n//   }, []);\n//\n//   const fieldProps = {\n//     ...restEvents,\n//     id,\n//     name,\n//     type,\n//     value,\n//     validate,\n//     placeholder,\n//     className: fieldClass,\n//     onChange: handleChange\n//   };\n//\n//   if (type === \"textarea\") {\n//     delete fieldProps.type;\n//     delete fieldProps.value;\n//\n//     fieldProps.defaultValue = value;\n//     fieldProps.rows = rows || 2;\n//   }\n//\n//   return field && field.value !== undefined ? (\n//     <div className={contClass}>\n//       {label}\n//       {type === \"textarea\" ? (\n//         <textarea {...fieldProps} />\n//       ) : (\n//         <input {...fieldProps} />\n//       )}\n//       <p className={errorClass}>// place for errors</p>\n//     </div>\n//   ) : (\n//     \"\"\n//   );\n// };\n//\n// export default TextInput;","map":{"version":3,"sources":["/Users/connorcates/Documents/Hamilton Senior/faculty-voting/code/src/components/TextInput.js"],"names":["React","TextInput","props","value","event","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEA,KAAK,CAACC,KAFf;AAGE,IAAA,QAAQ,EAAEC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BANF,CADF;AAUD,CAXD;;AAaA,eAAeL,SAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\n\nconst TextInput = props => {\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={event => console.log(\"value changed!\")}\n      />\n      <p>// place for errors</p>\n    </div>\n  );\n};\n\nexport default TextInput;\n\n// import React, { useContext, useEffect } from \"react\";\n// import { FormCtx } from \"./Form\";\n//\n// const TextInput = props => {\n//   const { id } = props;\n//   const { setFields, addField, fields } = useContext(FormCtx);\n//   const field = fields[id] || {};\n//   const {\n//     name,\n//     rows,\n//     value,\n//     validate,\n//     placeholder,\n//     label = \"\",\n//     type = \"text\",\n//     events = {},\n//     classes = {}\n//   } =  field;\n//   const { onChange, ...restEvents } = events;\n//   const{ contClass, fieldClass, errorClass } = classes;\n//\n//   const handleChange = event => {\n//     try {\n//       setFields(event, field);\n//     } catch (error) {\n//       throw error;\n//     }\n//\n//     if (typeof onChange == \"function\")  {\n//       onChange({\n//         ...field,\n//         value: event.target.value\n//       });\n//     }\n//   };\n//\n//   useEffect(() => {\n//     addField({\n//       field: props,\n//       value\n//     });\n//   }, []);\n//\n//   const fieldProps = {\n//     ...restEvents,\n//     id,\n//     name,\n//     type,\n//     value,\n//     validate,\n//     placeholder,\n//     className: fieldClass,\n//     onChange: handleChange\n//   };\n//\n//   if (type === \"textarea\") {\n//     delete fieldProps.type;\n//     delete fieldProps.value;\n//\n//     fieldProps.defaultValue = value;\n//     fieldProps.rows = rows || 2;\n//   }\n//\n//   return field && field.value !== undefined ? (\n//     <div className={contClass}>\n//       {label}\n//       {type === \"textarea\" ? (\n//         <textarea {...fieldProps} />\n//       ) : (\n//         <input {...fieldProps} />\n//       )}\n//       <p className={errorClass}>// place for errors</p>\n//     </div>\n//   ) : (\n//     \"\"\n//   );\n// };\n//\n// export default TextInput;\n"]},"metadata":{},"sourceType":"module"}