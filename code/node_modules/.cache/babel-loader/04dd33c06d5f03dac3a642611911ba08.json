{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dubin\\\\Github\\\\faculty-voting\\\\code\\\\src\\\\components\\\\cards\\\\MultiVoteCard.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport ExtraPropTypes from 'react-extra-prop-types';\nimport { Colors } from '../theme/Colors';\nimport Body from '../theme/Body';\nimport { Jumbo } from '../theme/Jumbo';\nimport VotingCard from './VotingCard';\nimport MultipleChoiceGroup from '../options/MultipleChoiceGroup';\nimport SingleChoiceGroup from '../options/SingleChoiceGroup';\nimport SubmitButton from '../buttons/SubmitButton';\nimport InputOption from '../options/InputOption';\nimport TextOption from '../options/TextOption';\nconst propTypes = {\n  getVote: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool\n};\nconst defaultProps = {\n  title: 'Poll Title',\n  description: 'Poll description is very informative...'\n};\n\nclass MultiVoteCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._inputHandler = (event, index) => {\n      const newOptions = this.state.options.map(item => item);\n      const newOption = { ...newOptions[index],\n        value: event.target.value\n      };\n      newOptions[index] = newOption;\n\n      this._updateInput(newOptions);\n    };\n\n    this._renderOptions = () => {\n      const options = this.state.options.map((item, index) => {\n        const {\n          type,\n          value\n        } = item;\n\n        if (type === 'input') {\n          return /*#__PURE__*/React.createElement(InputOption, {\n            onChange: event => this._inputHandler(event, index),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 11\n            }\n          });\n        } else if (type === 'textarea') {\n          return /*#__PURE__*/React.createElement(InputOption, {\n            inputType: 'textarea',\n            onChange: event => this._inputHandler(event, index),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 11\n            }\n          });\n        }\n\n        ;\n        return /*#__PURE__*/React.createElement(TextOption, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 9\n          }\n        }, value);\n      });\n      return options;\n    };\n\n    this._renderOptionGroup = () => {\n      const options = this._renderOptions();\n\n      return /*#__PURE__*/React.createElement(MultipleChoiceGroup, {\n        buttonType: 'checkbox',\n        color: Colors.Blue,\n        updateSelected: this._updateSelected,\n        small: this.props.small,\n        medium: this.props.medium,\n        large: this.props.large,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, options);\n    };\n\n    this._checkStatus = () => {\n      let selected = false;\n      let submitted = false;\n      let resubmit = false;\n      let i;\n\n      for (i = 0; i < this.state.selectedOptions.length; i++) {\n        if (selected && submitted && resubmit) {\n          break;\n        }\n\n        if (this.state.selectedOptions[i]) {\n          selected = true;\n        }\n\n        if (this.state.submittedOptions[i]) {\n          submitted = true;\n        }\n\n        if (this.state.submittedOptions[i] != this.state.selectedOptions[i]) {\n          resubmit = true;\n        }\n      }\n\n      if (resubmit && selected && submitted) {\n        return {\n          resubmit: resubmit\n        };\n      } else if (submitted) {\n        return {\n          submitted: submitted\n        };\n      } else if (selected) {\n        return {\n          selected: selected\n        };\n      } else {\n        return {};\n      }\n    };\n\n    this._renderSubmitButton = () => {\n      const {\n        selected,\n        submitted,\n        resubmit\n      } = this._checkStatus();\n\n      const unselected = !selected && !submitted && !resubmit;\n      const submit = selected && !submitted && !resubmit;\n      return /*#__PURE__*/React.createElement(SubmitButton, Object.assign({\n        unselected: unselected,\n        submit: submit,\n        submitted: submitted,\n        resubmit: resubmit\n      }, this.props, {\n        onClick: this._handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    let selectedOptions = Array(this.props.options.length).fill(false);\n    let submittedOptions = Array(this.props.options.length).fill(false);\n    this.state = {\n      options: this.props.options,\n      submittedOptions: submittedOptions,\n      selectedOptions: selectedOptions\n    };\n    this._updateSelected = this._updateSelected.bind(this);\n    this._updateInput = this._updateInput.bind(this);\n    this._inputHandler = this._inputHandler.bind(this);\n    this._renderOptions = this._renderOptions.bind(this);\n    this._renderOptionGroup = this._renderOptionGroup.bind(this);\n    this._checkStatus = this._checkStatus.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n    this._renderSubmitButton = this._renderSubmitButton.bind(this);\n  }\n\n  async _updateSelected(selectedOptions) {\n    await this.setState({ ...this.state,\n      selectedOptions: selectedOptions\n    });\n  }\n\n  async _updateInput(newOptions) {\n    await this.setState({ ...this.state,\n      options: newOptions\n    });\n  }\n\n  async _handleSubmit(event) {\n    let selectedOptions = this.state.selectedOptions.map(item => item);\n    await this.setState({ ...this.state,\n      submittedOptions: selectedOptions\n    });\n\n    if (this.props.getVote) {\n      this.props.getVote({ ...this.state\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(VotingCard, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }), this._renderOptionGroup(), this._renderSubmitButton());\n  }\n\n}\n\n;\nMultiVoteCard.propTypes = propTypes;\nMultiVoteCard.defaultProps = defaultProps;\nexport default MultiVoteCard;","map":{"version":3,"sources":["C:/Users/dubin/Github/faculty-voting/code/src/components/cards/MultiVoteCard.js"],"names":["React","styled","PropTypes","ExtraPropTypes","Colors","Body","Jumbo","VotingCard","MultipleChoiceGroup","SingleChoiceGroup","SubmitButton","InputOption","TextOption","propTypes","getVote","func","title","string","description","small","bool","medium","large","defaultProps","MultiVoteCard","Component","constructor","props","_inputHandler","event","index","newOptions","state","options","map","item","newOption","value","target","_updateInput","_renderOptions","type","_renderOptionGroup","Blue","_updateSelected","_checkStatus","selected","submitted","resubmit","i","selectedOptions","length","submittedOptions","_renderSubmitButton","unselected","submit","_handleSubmit","Array","fill","bind","setState","render"],"mappings":"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","sourcesContent":["import React            from 'react';\r\nimport styled           from 'styled-components';\r\nimport PropTypes        from 'prop-types';\r\nimport ExtraPropTypes   from 'react-extra-prop-types';\r\n\r\nimport { Colors }       from '../theme/Colors';\r\nimport Body             from '../theme/Body';\r\nimport { Jumbo }        from '../theme/Jumbo';\r\n\r\nimport VotingCard       from './VotingCard';\r\n\r\nimport MultipleChoiceGroup      from '../options/MultipleChoiceGroup';\r\nimport SingleChoiceGroup      from '../options/SingleChoiceGroup';\r\n\r\nimport SubmitButton           from '../buttons/SubmitButton';\r\n\r\nimport InputOption       from '../options/InputOption';\r\nimport TextOption from '../options/TextOption';\r\n\r\nconst propTypes = {\r\n  getVote: PropTypes.func,\r\n\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n\r\n  small: PropTypes.bool,\r\n  medium: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  title: 'Poll Title',\r\n  description: 'Poll description is very informative...'\r\n};\r\n\r\n\r\nclass MultiVoteCard extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let selectedOptions = Array(this.props.options.length).fill(false);\r\n    let submittedOptions = Array(this.props.options.length).fill(false);\r\n\r\n    this.state = { options: this.props.options,\r\n                   submittedOptions: submittedOptions,\r\n                   selectedOptions: selectedOptions};\r\n\r\n    this._updateSelected = this._updateSelected.bind(this);\r\n    this._updateInput = this._updateInput.bind(this);\r\n\r\n    this._inputHandler= this._inputHandler.bind(this);\r\n    this._renderOptions = this._renderOptions.bind(this);\r\n    this._renderOptionGroup = this._renderOptionGroup.bind(this);\r\n\r\n    this._checkStatus = this._checkStatus.bind(this);\r\n    this._handleSubmit = this._handleSubmit.bind(this);\r\n    this._renderSubmitButton = this._renderSubmitButton.bind(this);\r\n  };\r\n\r\n  async _updateSelected( selectedOptions ){\r\n\r\n    await this.setState({ ...this.state,\r\n                          selectedOptions: selectedOptions });\r\n\r\n  };\r\n\r\n  async _updateInput ( newOptions ) {\r\n\r\n    await this.setState({ ...this.state,\r\n                          options: newOptions });\r\n\r\n  };\r\n\r\n  _inputHandler = (event, index) => {\r\n\r\n    const newOptions = this.state.options.map((item) => item );\r\n    const newOption = {...newOptions[index],\r\n                       value: event.target.value};\r\n    newOptions[index] = newOption;\r\n\r\n    this._updateInput(newOptions);\r\n  };\r\n\r\n  _renderOptions = () => {\r\n\r\n    const options = this.state.options.map((item, index) => {\r\n      const { type, value } = item;\r\n\r\n      if (type === 'input') {\r\n        return (\r\n          <InputOption onChange={(event) => this._inputHandler(event, index)}/>\r\n        );\r\n      }\r\n      else if (type === 'textarea') {\r\n        return (\r\n          <InputOption inputType={'textarea'} onChange={(event) => this._inputHandler(event, index)}/>\r\n        );\r\n      };\r\n\r\n      return (\r\n        <TextOption>\r\n          {value}\r\n        </TextOption>\r\n      );\r\n    });\r\n\r\n    return options;\r\n  }\r\n\r\n  _renderOptionGroup = () => {\r\n\r\n    const options = this._renderOptions();\r\n\r\n    return (\r\n        <MultipleChoiceGroup buttonType={'checkbox'}\r\n                             color={Colors.Blue}\r\n                             updateSelected={this._updateSelected}\r\n                             small={this.props.small}\r\n                             medium={this.props.medium}\r\n                             large={this.props.large}>\r\n          {options}\r\n        </MultipleChoiceGroup>\r\n    );\r\n  };\r\n\r\n  _checkStatus = () => {\r\n\r\n    let selected = false;\r\n    let submitted = false;\r\n    let resubmit = false;\r\n\r\n    let i;\r\n    for (i = 0; i < this.state.selectedOptions.length; i++) {\r\n\r\n      if (selected && submitted && resubmit) { break; }\r\n\r\n      if (this.state.selectedOptions[i]) {\r\n        selected = true;\r\n      }\r\n      if (this.state.submittedOptions[i]){\r\n        submitted = true;\r\n      }\r\n      if (this.state.submittedOptions[i] != this.state.selectedOptions[i]) {\r\n        resubmit = true;\r\n      }\r\n    }\r\n\r\n    if ( resubmit && selected && submitted) { return { resubmit: resubmit } }\r\n    else if ( submitted ) { return { submitted: submitted } }\r\n    else if ( selected ) { return { selected: selected } }\r\n    else { return {} }\r\n\r\n  };\r\n\r\n  async _handleSubmit( event ) {\r\n\r\n    let selectedOptions = this.state.selectedOptions.map((item) => item);\r\n\r\n    await this.setState({ ...this.state,\r\n                          submittedOptions: selectedOptions });\r\n\r\n    if (this.props.getVote) {this.props.getVote({...this.state})}\r\n\r\n  };\r\n\r\n  _renderSubmitButton = () => {\r\n\r\n    const { selected, submitted, resubmit } = this._checkStatus();\r\n\r\n    const unselected = !selected && !submitted && !resubmit;\r\n    const submit = selected && !submitted && !resubmit;\r\n\r\n    return (\r\n      <SubmitButton unselected={unselected}\r\n                    submit={submit}\r\n                    submitted={submitted}\r\n                    resubmit={resubmit}\r\n                    {...this.props}\r\n                    onClick={this._handleSubmit}/>\r\n    );\r\n  };\r\n\r\n  render() {\r\n      return (\r\n        <VotingCard {...this.props}>\r\n          {this._renderOptionGroup()}\r\n          {this._renderSubmitButton()}\r\n        </VotingCard>\r\n      );\r\n  };\r\n};\r\n\r\nMultiVoteCard.propTypes = propTypes;\r\nMultiVoteCard.defaultProps = defaultProps;\r\n\r\nexport default MultiVoteCard;\r\n"]},"metadata":{},"sourceType":"module"}