{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dubin\\\\Github\\\\faculty-voting\\\\code\\\\src\\\\components\\\\options\\\\MultipleChoiceGroup.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport ExtraPropTypes from 'react-extra-prop-types';\nimport OptionGroup from './OptionGroup';\nimport { Colors } from '../theme/Colors';\nconst propTypes = {\n  children: PropTypes.node,\n  getChoice: PropTypes.func,\n  buttonType: PropTypes.oneOf(['bubble', 'checkbox']),\n  buttonColor: ExtraPropTypes.color,\n  fontColor: ExtraPropTypes.color,\n  backgroundColor: ExtraPropTypes.color,\n  borderColor: ExtraPropTypes.color,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool,\n  extraLarge: PropTypes.bool\n};\nconst defaultProps = {\n  buttonType: 'bubble',\n  buttonColor: ExtraPropTypes.color,\n  fontColor: Colors.Black,\n  borderColor: Colors.Blue\n};\n\nclass MultipleChoiceGroup extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this._handleClick = (event, id) => {\n      if (this.state.selected[id]) {\n        let newSelected = this.state.selected;\n        newSelected[id] = false;\n        this.setState({ ...this.state,\n          selected: newSelected\n        });\n      } else {\n        let newSelected = this.state.selected;\n        newSelected[id] = true;\n        this.setState({ ...this.state,\n          selected: newSelected\n        });\n      }\n\n      console.log(this.state);\n\n      if (this.props.updateSelected) {\n        this.props.updateSelected(this.state.selected);\n      }\n    };\n\n    this._renderOptions = props => {\n      const {\n        children,\n        ...rest\n      } = props;\n      return children.map((item, index) => {\n        const onClick = event => this._handleClick(event, index);\n\n        const clicked = this.state.selected[index];\n        const itemProps = {\n          onClick: onClick,\n          clicked: clicked\n        };\n        return React.cloneElement(item, { ...itemProps\n        });\n      });\n    };\n\n    this.state = {\n      selected: Array(_props.children.length).fill(false)\n    };\n    this._handleClick = this._handleClick.bind(this);\n    this._renderOptions = this._renderOptions.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(OptionGroup, Object.assign({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }), this._renderOptions(this.props));\n  }\n\n}\n\n;\nMultipleChoiceGroup.propTypes = propTypes;\nMultipleChoiceGroup.defaultProps = defaultProps;\nexport default MultipleChoiceGroup;","map":{"version":3,"sources":["C:/Users/dubin/Github/faculty-voting/code/src/components/options/MultipleChoiceGroup.js"],"names":["React","styled","PropTypes","ExtraPropTypes","OptionGroup","Colors","propTypes","children","node","getChoice","func","buttonType","oneOf","buttonColor","color","fontColor","backgroundColor","borderColor","small","bool","medium","large","extraLarge","defaultProps","Black","Blue","MultipleChoiceGroup","Component","constructor","props","_handleClick","event","id","state","selected","newSelected","setState","console","log","updateSelected","_renderOptions","rest","map","item","index","onClick","clicked","itemProps","cloneElement","Array","length","fill","bind","render"],"mappings":"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","sourcesContent":["import React            from 'react';\r\nimport styled           from 'styled-components';\r\nimport PropTypes        from 'prop-types';\r\nimport ExtraPropTypes   from 'react-extra-prop-types';\r\n\r\nimport OptionGroup      from './OptionGroup';\r\nimport { Colors }       from '../theme/Colors';\r\n\r\nconst propTypes = {\r\n  children: PropTypes.node,\r\n  getChoice: PropTypes.func,\r\n\r\n  buttonType: PropTypes.oneOf(['bubble', 'checkbox']),\r\n  buttonColor: ExtraPropTypes.color,\r\n\r\n  fontColor: ExtraPropTypes.color,\r\n  backgroundColor: ExtraPropTypes.color,\r\n  borderColor: ExtraPropTypes.color,\r\n\r\n  small: PropTypes.bool,\r\n  medium: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n  extraLarge: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  buttonType: 'bubble',\r\n  buttonColor: ExtraPropTypes.color,\r\n\r\n  fontColor: Colors.Black,\r\n  borderColor: Colors.Blue,\r\n};\r\n\r\nclass MultipleChoiceGroup extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { selected: Array(props.children.length).fill(false) }\r\n\r\n    this._handleClick = this._handleClick.bind(this);\r\n    this._renderOptions = this._renderOptions.bind(this);\r\n  };\r\n\r\n\r\n  _handleClick = ( event, id ) => {\r\n\r\n    if (this.state.selected[id]) {\r\n      let newSelected = this.state.selected;\r\n      newSelected[id] = false;\r\n      this.setState({...this.state, selected: newSelected});\r\n    }\r\n    else {\r\n      let newSelected = this.state.selected;\r\n      newSelected[id] = true;\r\n      this.setState({...this.state, selected: newSelected});\r\n    }\r\n\r\n    console.log(this.state)\r\n    if (this.props.updateSelected) { this.props.updateSelected(this.state.selected)}\r\n\r\n  };\r\n\r\n   _renderOptions = ( props ) => {\r\n    const { children, ...rest } = props;\r\n\r\n    return children.map((item, index) => {\r\n\r\n      const onClick = (event) => this._handleClick(event, index);\r\n      const clicked = this.state.selected[index];\r\n\r\n      const itemProps = { onClick: onClick,\r\n                          clicked: clicked};\r\n      return (\r\n        React.cloneElement(item, {...itemProps})\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <OptionGroup {...this.props}>\r\n        {this._renderOptions(this.props)}\r\n      </OptionGroup>\r\n    )\r\n  }\r\n};\r\n\r\nMultipleChoiceGroup.propTypes = propTypes;\r\nMultipleChoiceGroup.defaultProps = defaultProps;\r\n\r\nexport default MultipleChoiceGroup;\r\n"]},"metadata":{},"sourceType":"module"}