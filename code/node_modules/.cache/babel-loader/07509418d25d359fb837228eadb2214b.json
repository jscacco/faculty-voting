{"ast":null,"code":"var _jsxFileName = \"/Users/connorcates/Documents/Hamilton Senior/faculty-voting/code/src/components/inputs/Input.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport ExtraPropTypes from 'react-extra-prop-types';\nimport { Colors } from '../theme/Colors';\nimport { Fonts } from '../theme/Fonts';\nimport TextArea from './TextArea';\nimport InputField from './InputField';\nconst propTypes = {\n  type: PropTypes.string,\n  extraSmall: PropTypes.bool,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool,\n  extraLarge: PropTypes.bool,\n  placeholder: PropTypes.string,\n  fontColor: ExtraPropTypes.color,\n  backgroundColor: ExtraPropTypes.color,\n  borderColor: ExtraPropTypes.color\n};\nconst defaultProps = {\n  type: 'inputfield'\n};\n\nconst renderInputField = props => /*#__PURE__*/React.createElement(InputField, Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }\n}));\n\nconst renderTextArea = props => /*#__PURE__*/React.createElement(TextArea, Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }\n}));\n\nconst Input = props => {\n  const {\n    type\n  } = props;\n  return type === 'textarea' ? renderTextArea(props) : renderInputField(props);\n};\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\nexport default Input;","map":{"version":3,"sources":["/Users/connorcates/Documents/Hamilton Senior/faculty-voting/code/src/components/inputs/Input.js"],"names":["React","styled","PropTypes","ExtraPropTypes","Colors","Fonts","TextArea","InputField","propTypes","type","string","extraSmall","bool","small","medium","large","extraLarge","placeholder","fontColor","color","backgroundColor","borderColor","defaultProps","renderInputField","props","renderTextArea","Input"],"mappings":";AAAA,OAAOA,KAAP,MAA6B,OAA7B;AACA,OAAOC,MAAP,MAA6B,mBAA7B;AACA,OAAOC,SAAP,MAA6B,YAA7B;AACA,OAAOC,cAAP,MAA6B,wBAA7B;AAEA,SAASC,MAAT,QAA6B,iBAA7B;AACA,SAASC,KAAT,QAA6B,gBAA7B;AACA,OAAOC,QAAP,MAA6B,YAA7B;AACA,OAAOC,UAAP,MAA6B,cAA7B;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAEP,SAAS,CAACQ,MADA;AAEhBC,EAAAA,UAAU,EAAET,SAAS,CAACU,IAFN;AAGhBC,EAAAA,KAAK,EAAEX,SAAS,CAACU,IAHD;AAIhBE,EAAAA,MAAM,EAAEZ,SAAS,CAACU,IAJF;AAKhBG,EAAAA,KAAK,EAAEb,SAAS,CAACU,IALD;AAMhBI,EAAAA,UAAU,EAAEd,SAAS,CAACU,IANN;AAOhBK,EAAAA,WAAW,EAAEf,SAAS,CAACQ,MAPP;AAQhBQ,EAAAA,SAAS,EAAEf,cAAc,CAACgB,KARV;AAShBC,EAAAA,eAAe,EAAEjB,cAAc,CAACgB,KAThB;AAUhBE,EAAAA,WAAW,EAAElB,cAAc,CAACgB;AAVZ,CAAlB;AAaA,MAAMG,YAAY,GAAG;AACnBb,EAAAA,IAAI,EAAE;AADa,CAArB;;AAIA,MAAMc,gBAAgB,GAAIC,KAAD,iBACvB,oBAAC,UAAD,oBAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAIA,MAAMC,cAAc,GAAID,KAAD,iBACrB,oBAAC,QAAD,oBAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAIA,MAAME,KAAK,GAAKF,KAAF,IAAa;AAEzB,QAAM;AAAEf,IAAAA;AAAF,MAAWe,KAAjB;AAEA,SAASf,IAAI,KAAK,UAAV,GAAwBgB,cAAc,CAACD,KAAD,CAAtC,GAAgDD,gBAAgB,CAACC,KAAD,CAAxE;AACD,CALD;;AAOAE,KAAK,CAAClB,SAAN,GAAkBA,SAAlB;AACAkB,KAAK,CAACJ,YAAN,GAAqBA,YAArB;AAEA,eAAeI,KAAf","sourcesContent":["import React            from 'react';\nimport styled           from 'styled-components';\nimport PropTypes        from 'prop-types';\nimport ExtraPropTypes   from 'react-extra-prop-types';\n\nimport { Colors }       from '../theme/Colors';\nimport { Fonts }        from '../theme/Fonts';\nimport TextArea         from './TextArea';\nimport InputField       from './InputField';\n\nconst propTypes = {\n  type: PropTypes.string,\n  extraSmall: PropTypes.bool,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool,\n  extraLarge: PropTypes.bool,\n  placeholder: PropTypes.string,\n  fontColor: ExtraPropTypes.color,\n  backgroundColor: ExtraPropTypes.color,\n  borderColor: ExtraPropTypes.color,\n};\n\nconst defaultProps = {\n  type: 'inputfield'\n};\n\nconst renderInputField = (props) => (\n  <InputField {...props}/>\n);\n\nconst renderTextArea = (props) => (\n  <TextArea {...props}/>\n);\n\nconst Input = ( props ) => {\n\n  const { type } = props;\n\n  return ((type === 'textarea') ? renderTextArea(props) : renderInputField(props));\n};\n\nInput.propTypes = propTypes;\nInput.defaultProps = defaultProps;\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}